# -*- mode: ruby -*-
# vi: set ft=ruby :


# Network Configuration
## 5GC IPs
CORE_IP = "192.168.56.10"

## gNodeB IPs
GNB_IP_CORE = "192.168.56.11"
GNB_IP_UE = "192.168.57.11"

## UE IPs
UE_IP = "192.168.57.12"
UE_EAP_IP = "192.168.58.100"
UE_LAN = "192.168.60.1"

## UE Configurations
UE_IMSI = "999700000000001"
UE_KEY = "465B5CE8B199B49FAA5F0A2EE238A6BC"
UE_OPC = "E8ED289DEBA952E4283B54E88E6183CA"
PDU_SESSIONS = "3"

## End Device IPs
NAUN3 = "192.168.60.100"

## EAP Auth Server IP
AUTH_SERVER_IP = "192.168.58.1"

## EAP Auth Server Configurations
CERT_PASSWD = SecureRandom.alphanumeric(8)
CLIENT_SECRET = CERT_PASSWD

open('ue-configs/eap-secrets', 'w'){ |f|
  f.puts "Certificate Password: #{CERT_PASSWD}"
  f.puts "Client Secret: #{CLIENT_SECRET}"
}

#### CORE INSTALL ####

$core_install = <<-'SCRIPT'

sudo add-apt-repository ppa:open5gs/latest
sudo apt-get install -y gnupg curl
sudo snap install yq

echo -e "\nAdding MongoDB repos"
curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor

echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list

echo -e "\nAdding Node repos"
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list

sudo apt-get update

echo -e "\nInstalling MongoDB, Nginx and Open5GS"
sudo apt-get install -y mongodb-org open5gs nodejs nginx

echo -e "\nReload MongoDB"
sudo systemctl start mongod
sudo systemctl enable mongod

echo -e "\nUpdate AMF NGAP and UPF GTPU IPs"
cat /etc/open5gs/amf.yaml | yq '.amf.ngap.server[0].address = "CORE_IP"' | sudo tee /etc/open5gs/amf.yaml
cat /etc/open5gs/upf.yaml | yq '.upf.gtpu.server[0].address = "CORE_IP"' | sudo tee /etc/open5gs/upf.yaml

echo -e "\nAttributing DNN name to default APN"
cat /etc/open5gs/smf.yaml \
| yq '.smf.session[0].dnn = "backhaul"' \
| sudo tee /etc/open5gs/smf.yaml
cat /etc/open5gs/upf.yaml \
| yq '.upf.session[0].dnn = "backhaul"' \
| yq '.upf.session[0].dev = "ogstun"' \
| sudo tee /etc/open5gs/upf.yaml

echo -e "\nAdding DNN for NAUN3 PDU Sessions attribution"
sudo ip tuntap add dev clienttun0 mode tun
sudo ip link set clienttun0 up
sudo ip addr add 10.46.0.1/16 brd 10.46.255.255 dev clienttun0
cat /etc/open5gs/smf.yaml \
| yq '.smf.session[1].subnet = "10.46.0.0/16"' \
| yq '.smf.session[1].gateway = "10.46.0.1"' \
| yq '.smf.session[1].dnn = "clients"' \
| sudo tee /etc/open5gs/smf.yaml
cat /etc/open5gs/upf.yaml \
| yq '.upf.session[1].subnet = "10.46.0.0/16"' \
| yq '.upf.session[1].gateway = "10.46.0.1"' \
| yq '.upf.session[1].dnn = "clients"' \
| yq '.upf.session[1].dev = "clienttun0"' \
| sudo tee /etc/open5gs/upf.yaml

sudo systemctl restart open5gs-upfd
sudo systemctl restart open5gs-smfd 
sudo systemctl restart open5gs-amfd

echo -e "\nInstalling WebUI"
curl -fsSL https://open5gs.org/open5gs/assets/webui/install | sudo -E bash -

echo -e "\nExposing WebUI through a reverse proxy"
echo "server {
    listen 8080;

    location / {
        proxy_pass http://127.0.0.1:9999;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}" | sudo tee /etc/nginx/sites-available/webui

sudo ln -s /etc/nginx/sites-available/webui /etc/nginx/sites-enabled/
sudo systemctl restart nginx

echo -e "\nPre-loading UE in the AMF"
sudo chmod +x open5gs-dbctl
./open5gs-dbctl add "UE_IMSI" "UE_KEY" "UE_OPC"

echo -e "\nPre-loading UE APN sessions"
./open5gs-dbctl update_apn "UE_IMSI" backhaul 0
./open5gs-dbctl update_apn "UE_IMSI" clients 0

SCRIPT
$core_install.gsub!("CORE_IP", CORE_IP).gsub!("UE_IMSI", UE_IMSI).gsub!("UE_KEY", UE_KEY).gsub!("UE_OPC", UE_OPC)

#### CORE INSTALL ####

#### UERANSIM INSTALL ####

$ueransim_install = <<-'SCRIPT'

sudo apt update

sudo apt install -y make git gcc g++ libsctp-dev lksctp-tools iproute2
sudo snap install cmake --classic
sudo snap install yq

echo -e "\nInstalling UERANSIM"
cd ~
git clone https://github.com/aligungr/UERANSIM
cd ~/UERANSIM
make

SCRIPT

#### UERANSIM INSTALL ####

#### gNodeB CONFIG ####

$gnb_install = <<-'SCRIPT'
cd ~/UERANSIM

echo -e "\nUpdate gNodeB and Core IPs"
cat config/open5gs-gnb.yaml \
| yq '.linkIp = "GNB_IP_UE"' \
| yq '.ngapIp = "GNB_IP_CORE"' \
| yq '.gtpIp = "GNB_IP_CORE"' \
| yq '.amfConfigs[0].address = "CORE_IP"' \
| sudo tee config/open5gs-gnb.yaml

echo -e "\nRunning gNB"
build/nr-gnb -c config/open5gs-gnb.yaml &> /log/gnb_$(date +%s).log &

SCRIPT
$gnb_install.gsub!("CORE_IP", CORE_IP).gsub!("GNB_IP_CORE", GNB_IP_CORE).gsub!("GNB_IP_UE", GNB_IP_UE)

#### gNodeB CONFIG ####

#### UE CONFIG ####

$ue_install = <<-'SCRIPT'
cd ~/UERANSIM

echo -e "\nUpdate gNodeB IP"
cat config/open5gs-ue.yaml | yq '.gnbSearchList[0] = "GNB_IP_UE"' | sudo tee config/open5gs-ue.yaml

echo -e "\nEnabling 'backhaul' APN"
cat config/open5gs-ue.yaml \
| yq '.sessions[0].apn = "backhaul"' \
| yq '.sessions[0].apn style="single"' \
| sudo tee config/open5gs-ue.yaml

echo -e "\nEnabling multiple PDU Sessions in 'clients' APN"
UL=$(("PDU_SESSIONS"))
for ((i=1;i<=$UL;i++)); do
  cat config/open5gs-ue.yaml \
  | yq '.sessions['$i'].type = "IPv4"' \
  | yq '.sessions['$i'].type style="single"' \
  | yq '.sessions['$i'].apn = "clients"' \
  | yq '.sessions['$i'].apn style="single"' \
  | yq '.sessions['$i'].slice.sst = 1' \
  | sudo tee config/open5gs-ue.yaml
done

echo -e "\nRunning UE"
build/nr-ue -c config/open5gs-ue.yaml &> /log/ue_$(date +%s).log &

echo -e "\nInstalling hostapd"
git clone git://w1.fi/hostap.git ~/hostap
cd ~/hostap/hostapd

echo -e "Enable wired driver and debug file"
cp defconfig .config
sed -i "s/#CONFIG_DRIVER_WIRED=y/CONFIG_DRIVER_WIRED=y/" .config

echo -e "Install dependencies and compile hostapd"
sudo apt-get install -y pkgconf libssl-dev libnl-3-dev libnl-genl-3-dev
make

echo -e "Writing hostapd configurations"
echo -e "interface=enp0s10
driver=wired
logger_syslog=-1
own_ip_addr="UE_EAP_IP"
auth_server_addr="AUTH_SERVER_IP"
auth_server_port=1812
auth_server_shared_secret="CLIENT_SECRET"" > hostapd.conf

echo -e "Running hostapd"
sudo ./hostapd ./hostapd.conf &> /log/hostapd_$(date +%s).log &

SCRIPT
$ue_install.gsub!("GNB_IP_UE", GNB_IP_UE).gsub!("PDU_SESSIONS", PDU_SESSIONS).gsub!("UE_EAP_IP", UE_EAP_IP).gsub!("AUTH_SERVER_IP", AUTH_SERVER_IP).gsub!("CLIENT_SECRET", CLIENT_SECRET)

#### UE CONFIG ####

#### EAP AUTH SERVER CONFIG ####

$auth_server_install = <<-'SCRIPT'

sudo apt update

sudo apt install -y freeradius

sudo -s -u freerad

echo -e "\Stopping FreeRADIUS service"
sudo systemctl stop freeradius.service

echo -e "\nAdding UE as client"
echo -e "client UE {\n\tipaddr = "UE_EAP_IP"\n\tsecret = "CLIENT_SECRET"\n}" >> /etc/freeradius/3.0/clients.conf

echo -e "\nEnabling EAP-TLS"
sed -i "s/default_eap_type = .*/default_eap_type = tls/" /etc/freeradius/3.0/mods-available/eap
rm /etc/freeradius/3.0/mods-enabled/eap
ln -s /etc/freeradius/3.0/mods-available/eap /etc/freeradius/3.0/mods-enabled/eap

echo -e "Removing old certificates"
cd /etc/freeradius/3.0/certs
rm -f *csr *key *p12 *pem *crl *crt *der *mk *txt *attr *old serial dh

echo -e "Generating new certificates"
sed -i "s/input_password.*/input_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/ca.cnf
sed -i "s/output_password.*/output_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/ca.cnf
sed -i "s/input_password.*/input_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/server.cnf
sed -i "s/output_password.*/output_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/server.cnf
sed -i "s/input_password.*/input_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/client.cnf
sed -i "s/output_password.*/output_password = "CERT_PASSWD"/" /etc/freeradius/3.0/certs/client.cnf
sed -i "s/private_key_password = .*/private_key_password = "CERT_PASSWD"/" /etc/freeradius/3.0/mods-available/eap
make

echo -e "Copying certificates to shared folder"
cp /etc/freeradius/3.0/certs/* /certs

echo -e "\Starting FreeRADIUS in full debugging"
sudo freeradius -X &> /log/freeradius_$(date +%s).log &

SCRIPT
$auth_server_install.gsub!("UE_EAP_IP", UE_EAP_IP).gsub!("CERT_PASSWD", CERT_PASSWD).gsub!("CLIENT_SECRET", CLIENT_SECRET)

#### EAP AUTH SERVER CONFIG ####

#### NAUN3 CONFIG ####

$naun3_install = <<-'SCRIPT'

sudo apt update

sudo apt-get update
sudo apt-get -y install wpasupplicant

echo -e "Writing wpa_supplicant configurations"
echo -e 'ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=vagrant
ap_scan=0
network={
    key_mgmt=IEEE8021X
    eap=TLS
    ca_cert="/certs/ca.pem"
    client_cert="/certs/client.pem"
    private_key="/certs/client.pem"
    private_key_passwd=""CLIENT_SECRET""
    eapol_flags=0
}' > wpa_supplicant.conf

echo -e "Running wpasupplicant"
sudo wpa_supplicant -ienp0s8 -Dwired -c./wpa_supplicant.conf &> /log/wpa_supplicant_$(date +%s).log &

SCRIPT
$naun3_install.gsub!("CLIENT_SECRET", CLIENT_SECRET)

#### NAUN3 CONFIG ####

Vagrant.configure("2") do |config|
  
  config.vm.define "core" do |core|
    core.vm.box = "ubuntu/jammy64"

    # Open5GS 5GC needs at least 2GB of RAM
    core.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

    core.vm.hostname = "core"
    core.vm.network "private_network", ip: CORE_IP

    # Exposing WebUI
    core.vm.network "forwarded_port", guest: 8080, host: 9999

    # Copying the DBCTL script
    config.vm.provision "file", source: "open5gs-dbctl", destination: "open5gs-dbctl"

    # Open5GS installation
    core.vm.provision "shell", inline: $core_install
  end

  config.vm.define "gnb" do |gnb|
    gnb.vm.box = "ubuntu/jammy64"

    gnb.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    gnb.vm.hostname = "gnb"

    # gNB to Core
    gnb.vm.network "private_network", ip: GNB_IP_CORE
    
    # gNB to Subs
    gnb.vm.network "private_network", ip: GNB_IP_UE

    # UERANSIM installation
    gnb.vm.provision "shell", inline: $ueransim_install

    # gNodeB configuration
    gnb.vm.provision "shell", inline: $gnb_install

    gnb.vm.synced_folder "./runtime-logs", "/log", create: true
  end

  config.vm.define "ue" do |ue|
    ue.vm.box = "ubuntu/jammy64"

    ue.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    ue.vm.hostname = "ue"
    
    # RAN interface
    ue.vm.network "private_network", ip: UE_IP

    # EAP Auth Server interface
    ue.vm.network "private_network", ip: UE_EAP_IP

    # LAN interface
    ue.vm.network "private_network", ip: UE_LAN

    # UERANSIM installation
    ue.vm.provision "shell", inline: $ueransim_install

    # UE configuration
    ue.vm.provision "shell", inline: $ue_install

    ue.vm.synced_folder "./runtime-logs", "/log", create: true
  end

  config.vm.define "auth_server" do |auth_server|
    auth_server.vm.box = "ubuntu/jammy64"

    auth_server.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    auth_server.vm.hostname = "authserver"
    
    # Authenticator Client interface
    auth_server.vm.network "private_network", ip: AUTH_SERVER_IP

    # Authenticator Server configuration
    auth_server.vm.provision "shell", inline: $auth_server_install

    # EAP Auth Server Certs
    auth_server.vm.synced_folder "./eap-radius-certs-sync", "/certs", create: true

    auth_server.vm.synced_folder "./runtime-logs", "/log", create: true
  end

  config.vm.define "naun3" do |naun3|
    naun3.vm.box = "ubuntu/jammy64"

    naun3.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    naun3.vm.hostname = "naun3"
    naun3.vm.network "private_network", ip: NAUN3

    # EAP Auth Server Certs
    naun3.vm.synced_folder "./eap-radius-certs-sync", "/certs", create: true

    # NAUN3 configuration
    naun3.vm.provision "shell", inline: $naun3_install

    naun3.vm.synced_folder "./runtime-logs", "/log", create: true
  end

end
