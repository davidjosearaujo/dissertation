# -*- mode: ruby -*-
# vi: set ft=ruby :


# Network Configuration
## 5GC IP
CORE_IP = "192.168.57.10"
## Authentication Server IP via backhaul tunnel
AUTH_SERVER_IP="10.45.0.1"

## gNodeB IPs
GNB_IP_CORE = "192.168.57.100"
GNB_IP_UE = "192.168.58.10"

## UE IPs
UE_IP = "192.168.58.100"
UE_LAN_IP = "192.168.59.10"
CLIENT_EAP_IP = "10.45.0.2"

## UE Configurations
UE_IMSI = "999700000000001"
UE_KEY = "465B5CE8B199B49FAA5F0A2EE238A6BC"
UE_OPC = "E8ED289DEBA952E4283B54E88E6183CA"

## End Device IPs
NAUN3_IP = "192.168.59.100"

## EAP Auth Configurations
EAP_SECRETS_FILE = "build/eap-secrets" 
CERT_CA_PASSWD = "password1423" #SecureRandom.alphanumeric(8)
CERT_SERVER_PASSWD = CERT_CA_PASSWD
CERT_CLIENT_PASSWD = CERT_CA_PASSWD
CLIENT_SECRET = CERT_CA_PASSWD

if ARGV.include?("up") && !File.exist?(EAP_SECRETS_FILE)
  puts `mkdir build && cd interceptor && go build -o ../build/ && cd ..`
  File.write(EAP_SECRETS_FILE, "#{CERT_CA_PASSWD},#{CERT_SERVER_PASSWD},#{CERT_CLIENT_PASSWD},#{CLIENT_SECRET}")
elsif File.exist?(EAP_SECRETS_FILE)
  puts `cd interceptor && go build -o ../build/ && cd ..`
  CERT_CA_PASSWD, CERT_SERVER_PASSWD, CERT_CLIENT_PASSWD, CLIENT_SECRET, = File.read(EAP_SECRETS_FILE).split(",")
end

Vagrant.configure("2") do |config|
  
  config.vm.define "core" do |core|
    core.vm.box = "ubuntu/jammy64"

    # Open5GS 5GC needs at least 2GB of RAM
    core.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

    core.vm.hostname = "core"
    core.vm.network "private_network", ip: CORE_IP

    # Exposing WebUI
    core.vm.network "forwarded_port", guest: 8080, host: 9999

    # Copying the DBCTL script
    core.vm.provision "file", source: "open5gs-dbctl.sh", destination: "open5gs-dbctl.sh"

    # Open5GS installation
    core.vm.provision "file", source: "core_install.sh", destination: "core_install.sh"
    core.vm.provision "shell" do |s|
      s.inline  = "/bin/bash core_install.sh $1 $2 $3 $4"
      s.args    = [CORE_IP, UE_IMSI, UE_KEY, UE_OPC]
    end

    # Authenticator Server configuration
    core.vm.provision "file", source: "auth_server_install.sh", destination: "auth_server_install.sh"
    core.vm.provision "shell" do |s|
      s.inline  = "/bin/bash auth_server_install.sh $1 $2 $3 $4 $5"
      s.args    = [CLIENT_EAP_IP, CERT_CA_PASSWD, CERT_SERVER_PASSWD, CERT_CLIENT_PASSWD, CLIENT_SECRET]
    end

    # EAP Auth Server Certs
    core.vm.synced_folder "./build/certs", "/certs", create: true

    core.vm.synced_folder "./build/logs", "/log", create: true

  end

  config.vm.define "gnb" do |gnb|
    gnb.vm.box = "ubuntu/jammy64"

    gnb.vm.provider "virtualbox" do |v|
      v.memory  = 1024
      v.cpus    = 1
    end

    gnb.vm.hostname = "gnb"

    # gNB to Core
    gnb.vm.network "private_network", ip: GNB_IP_CORE
    
    # gNB to Subs
    gnb.vm.network "private_network", ip: GNB_IP_UE

    gnb.vm.provision "file", source: "ueransim/nr-gnb", destination: "/home/vagrant/nr-gnb"

    gnb.vm.provision "file", source: "ueransim/open5gs-gnb.yaml", destination: "/home/vagrant/open5gs-gnb.yaml"

    # gNodeB configuration
    gnb.vm.provision "file", source: "gnb_install.sh", destination: "gnb_install.sh"
    gnb.vm.provision "shell" do |s|
      s.inline  = "/bin/bash gnb_install.sh $1 $2 $3"
      s.args    = [CORE_IP, GNB_IP_CORE, GNB_IP_UE]
    end

    gnb.vm.synced_folder "./build/logs", "/log", create: true
  end

  config.vm.define "ue" do |ue|
    ue.vm.box = "ubuntu/jammy64"

    ue.vm.provider "virtualbox" do |v|
      v.memory  = 1024
      v.cpus    = 1
    end

    ue.vm.hostname = "ue"
    
    # RAN interface
    ue.vm.network "private_network", ip: UE_IP

    # LAN interface
    ue.vm.network "private_network", ip: UE_LAN_IP

    # Interceptor for hostapd, dnsmasq and pdu session management
    ue.vm.provision "file", source: "build/interceptor", destination: "interceptor"

    ue.vm.provision "file", source: "ueransim/nr-cli", destination: "/home/vagrant/nr-cli"
    ue.vm.provision "shell", inline: "sudo mv /home/vagrant/nr-cli /usr/local/bin/nr-cli"

    ue.vm.provision "file", source: "ueransim/nr-ue", destination: "/home/vagrant/nr-ue"
    ue.vm.provision "file", source: "ueransim/open5gs-ue.yaml", destination: "/home/vagrant/open5gs-ue.yaml"

    ue.vm.provision "file", source: "hostapd/hostapd", destination: "/home/vagrant/hostapd"

    # UE configuration
    ue.vm.provision "file", source: "ue_install.sh", destination: "ue_install.sh"
    ue.vm.provision "shell" do |s|
      s.inline  = "/bin/bash ue_install.sh $1 $2 $3 $4 $5"
      s.args    = [GNB_IP_UE, CLIENT_EAP_IP, AUTH_SERVER_IP, CLIENT_SECRET, UE_LAN_IP]
    end

    ue.vm.synced_folder "./build/logs", "/log", create: true
  end

  config.vm.define "naun3_1" do |naun3_1|
    naun3_1.vm.box = "ubuntu/jammy64"

    naun3_1.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    naun3_1.vm.hostname = "naun301"
    naun3_1.vm.network "private_network", ip: NAUN3_IP, auto_config: false

    # EAP Auth Server Certs
    naun3_1.vm.synced_folder "./build/certs", "/certs", create: true

    # NAUN3 configuration
    naun3_1.vm.provision "file", source: "naun3_install.sh", destination: "naun3_install.sh"
    naun3_1.vm.provision "shell" do |s|
      s.inline  = "/bin/bash naun3_install.sh $1"
      s.args    = [CERT_CLIENT_PASSWD]
    end

    naun3_1.vm.synced_folder "./build/logs", "/log", create: true
  end

  config.vm.define "naun3_2" do |naun3_2|
    naun3_2.vm.box = "ubuntu/jammy64"

    naun3_2.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    naun3_2.vm.hostname = "naun302"
    naun3_2.vm.network "private_network", ip: NAUN3_IP, auto_config: false

    # EAP Auth Server Certs
    naun3_2.vm.synced_folder "./build/certs", "/certs", create: true

    # NAUN3 configuration
    naun3_2.vm.provision "file", source: "naun3_install.sh", destination: "naun3_install.sh"
    naun3_2.vm.provision "shell" do |s|
      s.inline  = "/bin/bash naun3_install.sh $1"
      s.args    = [CERT_CLIENT_PASSWD]
    end

    naun3_2.vm.synced_folder "./build/logs", "/log", create: true
  end
end