# -*- mode: ruby -*-
# vi: set ft=ruby :

CORE_IP = "192.168.56.10"
GNB_IP = "192.168.56.11"
UE_IP = "192.168.56.12"

UE_IMSI = "999700000000001"
UE_KEY = "465B5CE8B199B49FAA5F0A2EE238A6BC"
UE_OPC = "E8ED289DEBA952E4283B54E88E6183CA"

PDU_SESSIONS = "3"

#### CORE INSTALL ####

$core_install = <<-'SCRIPT'

sudo add-apt-repository ppa:open5gs/latest
sudo apt-get install -y gnupg curl
sudo snap install yq

echo -e "\nAdding MongoDB repos"
curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor

echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list

echo -e "\nAdding Node repos"
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list

sudo apt-get update

echo -e "\nInstalling MongoDB, Nginx and Open5GS"
sudo apt-get install -y mongodb-org open5gs nodejs nginx

echo -e "\nReload MongoDB"
sudo systemctl start mongod
sudo systemctl enable mongod

echo -e "\nUpdate AMF NGAP and UPF GTPU IPs"
cat /etc/open5gs/amf.yaml | yq '.amf.ngap.server[0].address = "CORE_IP"' | sudo tee /etc/open5gs/amf.yaml
cat /etc/open5gs/upf.yaml | yq '.upf.gtpu.server[0].address = "CORE_IP"' | sudo tee /etc/open5gs/upf.yaml

# TODO Requiring multiple slices? Or just multiple sessions?
echo -e "\nEnabling support for multiple S-NSSAI in the AMF"
UL=$(("PDU_SESSIONS"-1))
for ((i=1;i<=$UL;i++)); do
  SST=$(($i+1))
  cat /etc/open5gs/amf.yaml \
  | yq '.amf.plmn_support['$i'].plmn_id.mcc = 999' \
  | yq '.amf.plmn_support['$i'].plmn_id.mnc = 70' \
  | yq '.amf.plmn_support['$i'].s_nssai[0].sst = '$SST \
  | yq '.amf.plmn_support['$i'].s_nssai[0].sd = 00000'$SST \
  | sudo tee /etc/open5gs/amf.yaml
done

# TODO Currently this is not having any effect in the PDU Sessions, as the sessions being established are using the same subnet for some reason. Maybe if they were in the same slice this would have an effect? But I don't know really
echo -e "\nEnabling support for multiple Sessions in the SMF and UPF"
UL=$(("PDU_SESSIONS"))
for ((i=2;i<=$UL;i++)); do
  OCT=$((45+$i))

  cat /etc/open5gs/smf.yaml \
  | yq '.smf.session['$i'].subnet = "10.'$OCT'.0.0/16"' \
  | yq '.smf.session['$i'].gateway = "10.'$OCT'.0.1"' \
  | sudo tee /etc/open5gs/smf.yaml

  cat /etc/open5gs/upf.yaml \
  | yq '.upf.session['$i'].subnet = "10.'$OCT'.0.0/16"' \
  | yq '.upf.session['$i'].gateway = "10.'$OCT'.0.1"' \
  | sudo tee /etc/open5gs/upf.yaml
done

sudo systemctl restart open5gs-amfd
sudo systemctl restart open5gs-smfd
sudo systemctl restart open5gs-upfd

echo -e "\nInstalling WebUI"
curl -fsSL https://open5gs.org/open5gs/assets/webui/install | sudo -E bash -

echo -e "\nExposing WebUI through a reverse proxy"
echo "server {
    listen 8080;

    location / {
        proxy_pass http://127.0.0.1:9999;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}" | sudo tee /etc/nginx/sites-available/webui

sudo ln -s /etc/nginx/sites-available/webui /etc/nginx/sites-enabled/
sudo systemctl restart nginx

echo -e "\nPre-loading UE in the AMF"
sudo chmod +x open5gs-dbctl
./open5gs-dbctl add "UE_IMSI" "UE_KEY" "UE_OPC"

# TODO Requiring multiple slices? Or just multiple sessions? SD equals SST
echo -e "\nPre-loading UE Slices"
UL=$(("PDU_SESSIONS"-1))
for ((i=1;i<=$UL;i++)); do
  SST=$(($i+1))
  ./open5gs-dbctl update_slice "UE_IMSI" internet $SST 00000$SST
done

SCRIPT
$core_install.gsub!("CORE_IP", CORE_IP).gsub!("UE_IMSI", UE_IMSI).gsub!("UE_KEY", UE_KEY).gsub!("UE_OPC", UE_OPC).gsub!("PDU_SESSIONS", PDU_SESSIONS)

#### CORE INSTALL ####

#### UERANSIM INSTALL ####

$ueransim_install = <<-'SCRIPT'

sudo apt update

sudo apt install -y make git gcc g++ libsctp-dev lksctp-tools iproute2
sudo snap install cmake --classic
sudo snap install yq

echo -e "\nInstalling UERANSIM"
cd ~
git clone https://github.com/aligungr/UERANSIM
cd ~/UERANSIM
make

SCRIPT

#### UERANSIM INSTALL ####

#### gNodeB CONFIG ####

$gnb_install = <<-'SCRIPT'
cd ~/UERANSIM

echo -e "\nUpdate gNodeB and Core IPs"
cat config/open5gs-gnb.yaml \
| yq '.linkIp = "GNB_IP"' \
| yq '.ngapIp = "GNB_IP"' \
| yq '.ngapIp = "GNB_IP"' \
| yq '.gtpIp = "GNB_IP"' \
| yq '.amfConfigs[0].address = "CORE_IP"' \
| sudo tee config/open5gs-gnb.yaml

# TODO Requiring multiple slices? Or just multiple sessions?
echo -e "\nEnabling multiple slices"
UL=$(("PDU_SESSIONS"-1))
for ((i=1;i<=$UL;i++)); do
  SST=$(($i+1))
  cat config/open5gs-gnb.yaml \
  | yq '.slices['$i'].sst = '$SST \
  | yq '.slices['$i'].sd = 00000'$SST \
  | sudo tee config/open5gs-gnb.yaml
done

echo -e "\nRunning gNB"
build/nr-gnb -c config/open5gs-gnb.yaml &> /log/gnb_$(date +%s).log &

SCRIPT
$gnb_install.gsub!("CORE_IP", CORE_IP).gsub!("GNB_IP", GNB_IP).gsub!("PDU_SESSIONS", PDU_SESSIONS)

#### gNodeB CONFIG ####

#### UE CONFIG ####

$ue_install = <<-'SCRIPT'
cd ~/UERANSIM

echo -e "\nUpdate gNodeB IP"
cat config/open5gs-ue.yaml | yq '.gnbSearchList[0] = "GNB_IP"' | sudo tee config/open5gs-ue.yaml

echo -e "\nEnabling multiple PDU sessions"
UL=$(("PDU_SESSIONS"-1))
for ((i=1;i<=$UL;i++)); do
  SST=$(($i+1))
  cat config/open5gs-ue.yaml \
  | yq '.sessions['$i'].type = "IPv4"' \
  | yq '.sessions['$i'].type style="single"' \
  | yq '.sessions['$i'].apn = "internet"' \
  | yq '.sessions['$i'].apn style="single"' \
  | yq '.sessions['$i'].slice.sst = '$SST \
  | yq '.sessions['$i'].slice.sd = '$SST \
  | yq '.configured-nssai['$i'].sst = '$SST \
  | yq '.configured-nssai['$i'].sd = 00000'$SST \
  | sudo tee config/open5gs-ue.yaml
done

echo -e "\nRunning UE"
build/nr-ue -c config/open5gs-ue.yaml &> /log/ue_$(date +%s).log &

SCRIPT
$ue_install.gsub!("GNB_IP", GNB_IP).gsub!("PDU_SESSIONS", PDU_SESSIONS)

#### UE CONFIG ####

Vagrant.configure("2") do |config|
  
  config.vm.define "core" do |core|
    core.vm.box = "ubuntu/jammy64"

    # Open5GS 5GC needs at least 2GB of RAM
    core.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

    core.vm.hostname = "core"
    core.vm.network "private_network", ip: CORE_IP

    config.vm.provision "file", source: "open5gs-dbctl", destination: "open5gs-dbctl"

    core.vm.provision "shell", inline: $core_install

    # Exposing WebUI
    core.vm.network "forwarded_port", guest: 8080, host: 9999
  end

  config.vm.define "gnb" do |gnb|
    gnb.vm.box = "ubuntu/jammy64"

    gnb.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    gnb.vm.hostname = "gnb"
    gnb.vm.network "private_network", ip: GNB_IP

    gnb.vm.synced_folder "./runtime_logs", "/log", create: true

    gnb.vm.provision "shell", inline: $ueransim_install

    gnb.vm.provision "shell", inline: $gnb_install
  end

  config.vm.define "ue" do |ue|
    ue.vm.box = "ubuntu/jammy64"

    ue.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
    end

    ue.vm.hostname = "ue"
    ue.vm.network "private_network", ip: UE_IP

    ue.vm.synced_folder "./runtime_logs", "/log", create: true

    ue.vm.provision "shell", inline: $ueransim_install

    ue.vm.provision "shell", inline: $ue_install
  end

end
